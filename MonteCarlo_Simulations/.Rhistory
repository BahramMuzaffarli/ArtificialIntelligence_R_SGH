generate <- function(n = 10) {
# generating x coordinates
x <- runif(n,0,1)
# generating y coordinates
y <- runif(n,0,1)
# check which of the points lie inside a quarter circle
shoot <- ifelse(sqrt(x^2+y^2)<=1, TRUE, FALSE)
# number of hits
hit <- mean(shoot)
# approximation of the pi value
my_pi <- 4*hit
# information
cat(paste('Approximation for n =', n, ' pi =', my_pi, '\n'))
# graph
jpeg(filename = paste0("graph_n", n, ".jpg"))
plot(x[shoot], y[shoot], main=paste('n=', n), xlim=c(0,1), ylim=c(0,1), col='blue', xlab='x-coordinates', ylab='y-coordinates', pch=1)
points(x[!shoot], y[!shoot], col='red', pch=3)
dev.off()
}
generate(50)
generate(500)
generate(5000)
library("gramEvol")
evalFunc <- function(x=c()) {
return(abs(2 - as.numeric(paste0(x[1], ".", paste0(x[-1], collapse = "")))^2))
}
monitorFunc <- function(result) {
cat("approximation = ", as.numeric(paste0(result$best$genome[1], ".", paste0(result$best$genome[-1], collapse = ""))),
"\nerror = ", min(result$best$cost), "\n")
}
# number of digits
n <- 5
x <- GeneticAlg.int(genomeLen = n, codonMin = 0, codonMax = 9,
allowrepeat = TRUE, terminationCost = 0.00001,
monitorFunc = monitorFunc, evalFunc = evalFunc,
iterations = 100, popSize = 100)
print(x)
cat("sqrt(2) = ", sqrt(2),
"\napproximation = ", as.numeric(paste0(x$best$genome[1], ".", paste0(x$best$genome[-1], collapse = ""))),
"\nerror = ", abs(2 - as.numeric(paste0(x$best$genome[1], ".", paste0(x$best$genome[-1], collapse = "")))^2), "\n")
