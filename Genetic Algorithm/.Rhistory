library("genalg")
library("ggplot2")
library("animation")
##           item survivalpoints weight
## 1  pocketknife             10      1
## 4       unions              2      1
## 5 sleeping bag             30      7
cat(chromosome %*% dataset$survivalpoints)
# optimisation
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit) {
return(0)
} else {
return(-current_solution_survivalpoints)
}
}
library("genalg")
library("ggplot2")
library("animation")
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "unions",
"sleeping bag", "rope", "compass"),
survivalpoints = c(10, 20, 15, 2, 30, 10, 30),
weight = c(1, 5, 10, 1, 7, 5, 1))
weightlimit <- 20
# exemplary chromosome
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
##           item survivalpoints weight
## 1  pocketknife             10      1
## 4       unions              2      1
## 5 sleeping bag             30      7
cat(chromosome %*% dataset$survivalpoints)
# optimisation
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit) {
return(0)
} else {
return(-current_solution_survivalpoints)
}
}
iter <- 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
# solution
summary(GAmodel, echo=TRUE)
solution = c(1, 1, 0, 1, 1, 1, 1)
dataset[solution == 1, ]
# solution vs available
cat(paste(solution %*% dataset$survivalpoints, "/", sum(dataset$survivalpoints)))
# visualisation
animate_plot <- function() {
for (i in seq(2, iter)) {
temp <- data.frame(Generation = c(seq(1, i), seq(1, i)),
Variable = c(rep("mean", i), rep("best", i)),
Survivalpoints = c(-GAmodel$mean[1:i], -GAmodel$best[1:i]))
pl <- ggplot(temp, aes(x = Generation, y = Survivalpoints, group = Variable, colour = Variable)) + geom_line() +
scale_x_continuous(limits = c(0, iter)) + scale_y_continuous(limits = c(0, 110)) +
geom_hline(yintercept = max(temp$Survivalpoints)) + scale_colour_brewer(palette = "Set1") +
ggtitle(label = "Evolution Knapsack optimization model")
print(pl)
}
}
# save the animation
saveGIF(animate_plot(), interval = 0.1, outdir = getwd(), ani.height = 600, ani.width = 600)
library("genalg")
evalFunc <- function(X=c()) {
solution <- matrix(X, nrow = 5, ncol = 3, byrow = TRUE)
# sum over columns (<=)
cond_columns <- (colSums(solution) <= c(750, 640, 450))
# sum over row (>=)
cond_rows <- (rowSums(solution) >= c(180, 80, 200, 160, 220))
if (sum(!cond_columns) + sum(!cond_rows) == 0) {
transport_cost <- matrix(c(100, 60, 30,
80 , 50, 40,
60 , 40, 50,
50 , 30, 50,
40 , 60, 90), nrow = 5, ncol = 3, byrow = TRUE)*solution
return(sum(transport_cost))
}
return(1e8)
}
monitorFunc <- function(result) {
cat("Best of gen: ", min(result$evaluations), "\n")
}
lower_bounds <- rep(0, times=15)
upper_bounds <- rep(250, times=15)
# first try
rbga.results = rbga(stringMin=lower_bounds, stringMax=upper_bounds, popSize=200,
evalFunc=evalFunc, monitorFunc=monitorFunc,
iters=1000, verbose=FALSE, mutationChance=0.01)
# second try
rbga.results = rbga(stringMin=lower_bounds, stringMax=upper_bounds, popSize=50,
evalFunc=evalFunc, monitorFunc=NULL,
iters=10000, verbose=FALSE, mutationChance=0.01)
# summary of the computations
summary(rbga.results, echo=TRUE)
# get result from the population
filter <- rbga.results$evaluations == min(rbga.results$evaluations)
bestObjectCount <- sum(rep(1, rbga.results$popSize)[filter])
if (bestObjectCount > 1) {
bestSolution = rbga.results$population[filter,][1,]
} else {
bestSolution = rbga.results$population[filter,]
}
solution <- matrix(bestSolution, nrow = 5, ncol = 3, byrow = TRUE)
transport_cost <- matrix(c(100, 60, 30,
80 , 50, 40,
60 , 40, 50,
50 , 30, 50,
40 , 60, 90), nrow = 5, ncol = 3, byrow = TRUE)*solution
sum(transport_cost)
# Excel solution
solution <- matrix(c(0,	0,	180,
0,	0,	80,
0,	200,	0,
0,	160,	0,
220,	0,	0), nrow = 5, ncol = 3, byrow = TRUE)
transport_cost <- matrix(c(100, 60, 30,
80 , 50, 40,
60 , 40, 50,
50 , 30, 50,
40 , 60, 90), nrow = 5, ncol = 3, byrow = TRUE)*solution
sum(transport_cost)
# plot the progress
plot(rbga.results$best)
# plot the progress
plot(rbga.results$best)
library("gramEvol")
evalFunc <- function(X=c()) {
solution <- matrix(X, nrow = 5, ncol = 3, byrow = TRUE)
# sum over columns (<=)
cond_columns <- (colSums(solution) <= c(750, 640, 450))
# sum over row (>=)
cond_rows <- (rowSums(solution) >= c(180, 80, 200, 160, 220))
if (sum(!cond_columns) + sum(!cond_rows) == 0) {
transport_cost <- matrix(c(100, 60, 30,
80 , 50, 40,
60 , 40, 50,
50 , 30, 50,
40 , 60, 90), nrow = 5, ncol = 3, byrow = TRUE)*solution
return(sum(ceiling(transport_cost/6)))
}
return(1e5)
}
monitorFunc <- function(result) {
# print(result)
cat("Best of gen: ", min(result$best$cost), "-", matrix(result$best$genome, nrow = 5, ncol = 3, byrow = TRUE), "\n")
}
# first try
x <- GeneticAlg.int(genomeLen = 15, codonMin = 0, codonMax = 250,
allowrepeat = TRUE, terminationCost = 5000,
monitorFunc = monitorFunc, evalFunc = evalFunc,
iterations = 100, popSize = 100)
# second try
x <- GeneticAlg.int(genomeLen = 15, codonMin = 0, codonMax = 250,
allowrepeat = TRUE, terminationCost = 5000,
monitorFunc = NULL, evalFunc = evalFunc,
iterations = 10000, popSize = 100)
print(x)
# exemplary solutions
# Best of gen:  5035 - 0 0 180 0 0 80 0 200 0 0 160 0 220 0 0
# Best of gen:  5035 - 0 0 0 0 220 0 0 200 160 0 180 80 0 0 0
solution <- matrix(x$best$genome, nrow = 5, ncol = 3, byrow = TRUE)
transport_cost <- matrix(c(100, 60, 30,
80 , 50, 40,
60 , 40, 50,
50 , 30, 50,
40 , 60, 90), nrow = 5, ncol = 3, byrow = TRUE)*solution
sum(ceiling(transport_cost/6))
